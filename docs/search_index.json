[
["index.html", "The tidyverse style guide Welcome", " The tidyverse style guide Hadley Wickham Welcome Good coding style is like correct punctuation: you can manage without it, butitsuremakesthingseasiertoread. Just as with punctuation, while there are many code styles to choose from, some are more reader-friendly than others. The style presented here, which is used throughout the tidyverse, is derived from Google’s R style guide and has evolved considerably over the years. To apply this style guide automatically, use lintr. "],
["files.html", "1 Files 1.1 Names 1.2 Structure", " 1 Files 1.1 Names File names should be meaningful and end in .R. Avoid using special characters in file names - stick with numbers, letters, -, and _. # Good fit_models.R utility_functions.R # Bad fit models.R foo.r stuff.r If files should be run in a particular order, prefix them with numbers. If it seems likely you’ll have more than 10 files, left pad with zero: 00_download.R 01_explore.R ... 09_model.R 10_visualize.R If you later realise that you’ve missed some steps, it’s tempting to use 02a, 02b, etc. However, I think it’s generally better to bite the bullet and rename all files. Pay attention to capitalization, since you, or some of your collaborators, might be using an operating system with a case-insensitive file system (e.g., Microsoft Windows or OS X) which can lead to problems with (case-sensitive) revision control systems. Prefer file names that are all lower case, and never have names that differ only in their capitalization. 1.2 Structure Use commented lines of - and = to break up your file into easily readable chunks. # Load data --------------------------- # Plot data --------------------------- If your script uses add-on packages, load them all at once at the very beginning of the file. This is more transparent than sprinkling library() calls throughout your code or having hidden dependencies that are loaded in a startup file, such as .Rprofile. "],
["syntax.html", "2 Syntax 2.1 Object names 2.2 Spacing 2.3 Argument names 2.4 Indenting 2.5 Long lines 2.6 Assignment 2.7 Semicolons 2.8 Quotes", " 2 Syntax 2.1 Object names “There are only two hard things in Computer Science: cache invalidation and naming things.” — Phil Karlton Variable and function names should use only lowercase letters, numbers, and _. Use underscores (_) to separate words within a name. Base R uses dots in function names (contrib.url()) and class names (data.frame), but it’s better to reserve dots exclusively for the S3 object system. In S3, methods are given the name function.class; if you also use in . function and class names you end up with confusing methods like as.data.frame.data.frame(). Generally, variable names should be nouns and function names should be verbs. Strive for names that are concise and meaningful (this is not easy!). # Good day_one day_1 # Bad first_day_of_the_month DayOne dayone djm1 Where possible, avoid re-using names of common functions and variables. This will cause confusion for the readers of your code. # Bad T &lt;- FALSE c &lt;- 10 mean &lt;- function(x) sum(x) 2.2 Spacing Put a space before and after all infix operators (=, +, -, &lt;-, etc.), and when naming arguments in function calls. Always put a space after a comma, and never before (just like in regular English). # Good average &lt;- mean(feet / 12 + inches, na.rm = TRUE) # Bad average&lt;-mean(feet/12+inches,na.rm=TRUE) There’s a small exception to this rule: don’t use spaces around :, ::, and :::. # Good x &lt;- 1:10 base::get # Bad x &lt;- 1 : 10 base :: get Place a space before (, except when it’s part of a function call. # Good if (debug) show(x) plot(x, y) # Bad if(debug)show(x) plot (x, y) Extra spacing (i.e., more than one space in a row) is ok if it improves alignment of equal signs or assignments (&lt;-). list( total = a + b + c, mean = (a + b + c) / n ) Do not place spaces around code in parentheses or square brackets (unless there’s a comma, in which case see above). # Good if (debug) do(x) diamonds[5, ] # Bad if ( debug ) do(x) # No spaces around debug x[1,] # Needs a space after the comma x[1 ,] # Space goes after comma not before 2.3 Argument names A function’s arguments typically fall into two broad categories: one supplies the data to compute on; the other controls details of computation. When you call a function, you typically omit the names of data arguments, because they are used so commonly. If you override the default value of an argument, use the full name: # Good mean(1:10, na.rm = TRUE) # Bad mean(x = 1:10, , FALSE) mean(, TRUE, x = c(1:10, NA)) Avoid partial matching. 2.4 Indenting Curly braces, {}, define the the most important hierarchy of R code. To make this hierarchy easy to see, always indent the code inside {} by two spaces. A { should never go on its own line and should always be followed by a new line. A } should always go on its own line, unless it’s followed by else or ). # Good if (y &lt; 0 &amp;&amp; debug) { message(&quot;y is negative&quot;) } if (y == 0) { if (x &gt; 0) { log(x) } else { message(&quot;x is negative or zero&quot;) } } else { y ^ x } # Bad if (y &lt; 0 &amp;&amp; debug) message(&quot;Y is negative&quot;) if (y == 0) { if (x &gt; 0) { log(x) } else { message(&quot;x is negative or zero&quot;) } } else { y ^ x } It’s ok to drop the curly braces if you have a very simple and short if statement that fits on one line. If you have any doubt, it’s better to use the full form. y &lt;- 10 x &lt;- if (y &lt; 20) &quot;Too low&quot; else &quot;Too high&quot; 2.5 Long lines Strive to limit your code to 80 characters per line. This fits comfortably on a printed page with a reasonably sized font. If you find yourself running out of room, this is a good indication that you should encapsulate some of the work in a separate function. If a function call is too long to fit on a single line, use one line each for the function name, each argument, and the closing ). This makes the code easier to read and to change later. # Good do_something_very_complicated( &quot;that&quot;, requires = many, arguments = &quot;some of which may be long&quot; ) # Bad do_something_very_complicated(&quot;that&quot;, requires, many, arguments, &quot;some of which may be long&quot; ) You may also place several arguments on the same line if they are closely related to each other, e.g., strings in calls to paste() or stop(). When building strings, where possible match one line of code to one line of output. # Good paste0( &quot;Requirement: &quot;, requires, &quot;\\n&quot;, &quot;Result: &quot;, result, &quot;\\n&quot; ) # Bad paste0( &quot;Requirement: &quot;, requires, &quot;\\n&quot;, &quot;Result: &quot;, result, &quot;\\n&quot;) 2.6 Assignment Use &lt;-, not =, for assignment. # Good x &lt;- 5 # Bad x = 5 2.7 Semicolons Don’t put ; at the end of a line, and don’t use ; to put multiple commands on one line. 2.8 Quotes Use &quot;, not ', for quoting text. The only exception is when the text already contains double quotes and no single quotes. # Good &quot;Text&quot; ## [1] &quot;Text&quot; &#39;Text with &quot;quotes&quot;&#39; ## [1] &quot;Text with \\&quot;quotes\\&quot;&quot; &#39;&lt;a href=&quot;http://style.tidyverse.org&quot;&gt;A link&lt;/a&gt;&#39; ## [1] &quot;&lt;a href=\\&quot;http://style.tidyverse.org\\&quot;&gt;A link&lt;/a&gt;&quot; # Bad &#39;Text&#39; ## [1] &quot;Text&quot; &#39;Text with &quot;double&quot; and \\&#39;single\\&#39; quotes&#39; ## [1] &quot;Text with \\&quot;double\\&quot; and &#39;single&#39; quotes&quot; "],
["functions.html", "3 Functions 3.1 Naming 3.2 Long lines 3.3 return() 3.4 Comments 3.5 Design", " 3 Functions 3.1 Naming Use verbs for function names, where possible. # Good add_row() permute() # Bad row_adder() permutation() 3.2 Long lines If a function definition runs over multiple lines, indent the second line to where the definition starts. # Good long_function_name &lt;- function(a = &quot;a long argument&quot;, b = &quot;another argument&quot;, c = &quot;another long argument&quot;) { # As usual code is indented by two spaces. } # Bad long_function_name &lt;- function(a = &quot;a long argument&quot;, b = &quot;another argument&quot;, c = &quot;another long argument&quot;) { # Here it&#39;s hard to spot where the definition end and the # code begins } 3.3 return() Only use return() for early returns. Otherwise rely on R to return the result of the last evaluted expression. # Good find_abs &lt;- function(x, y){ if (x &gt; 0) return(x) x * -1 } add_two &lt;- function(x, y) { x + y } # Bad add_two &lt;- function(x, y) { return(x + y) } If your function is called primarily for its side-effects (like printing, plotting, or saving to disk), it should return the first argument invisibly. This makes it possible to use the function as part of a pipe. print methods should usually do this, like this example from httr: print.url &lt;- function(x, ...) { cat(&quot;Url: &quot;, build_url(x), &quot;\\n&quot;, sep = &quot;&quot;) invisible(x) } 3.4 Comments In code, use comments to explain the “why” not the “what” or “how”. Each line of a comment should begin with the comment symbol and a single space: #. 3.5 Design There are two main design principles to bear in mind: A function should do one thing well. A function should be called either because it has side-effects or because it returns a value; not both. Strive to keep blocks within a function on one screen, &lt; 30 lines. A function should be easily understandable in isolation. Avoid global options. If your function has a transient side-effect (i.e. you need to create a temporary file or set an option), clean up after yourself with on.exit(). "],
["pipes.html", "4 Pipes 4.1 Introduction 4.2 Spacing and indenting 4.3 No arguments 4.4 Long lines 4.5 Assignment 4.6 Comments", " 4 Pipes 4.1 Introduction Use %&gt;% when you find yourself composing more than three or more functions together into a nested call, or creating intermediate objects that you don’t care about. # Good foo_foo %&gt;% hop(through = forest) %&gt;% scoop(up = field_mouse) %&gt;% bop(on = head) # Bad foo_foo &lt;- hop(foo_foo, through = forest) foo_foo &lt;- scoop(foo_foo, up = field_mice) foo_foo &lt;- bop(foo_foo, on = head) # Bad bop( scoop( hop(foo_foo, through = forest), up = field_mice ), on = head ) (If you’re not familiar with Litte ) Avoid using the pipe when: You need to manipulate more than one object at a time. Reserve pipes for a sequence of steps applied to one primary object. There are meaningful intermediate objects that could be given informative names. 4.2 Spacing and indenting %&gt;% should always have a space before it and a new line after it. After the first step, each line should be indented by two spaces. # Good iris %&gt;% group_by(Species) %&gt;% summarize_if(is.numeric(), mean) %&gt;% ungroup() %&gt;% gather(measure, value, -Species) %&gt;% arrange(value) # Bad iris %&gt;% group_by(Species) %&gt;% summarize_all(mean) %&gt;% ungroup %&gt;% gather(measure, value, -Species) %&gt;% arrange(value) It is ok to keep a one-step pipe on one line, although depending on the context, you may want to rewrite to remove the pipe. # good iris %&gt;% arrange(Petal.Width) arrange(iris, Petal.Width) 4.3 No arguments magrittr allows you to omit () on functions that don’t have arguments. Avoid this. # Good x %&gt;% unique() %&gt;% sort() # Bad x %&gt;% unique %&gt;% sort 4.4 Long lines If the arguments to a function don’t all fit on one line, put each argument on its own line and indent: iris %&gt;% group_by(Species) %&gt;% summarise( Sepal.Length = mean(Sepal.Length), Sepal.Width = mean(Sepal.Width), Sepcies = n_distinct(Species) ) 4.5 Assignment You can use to use -&gt; to create an object at the end of the pipe. Personally, I think you should avoid this technique. While starting with the assignment is a little more work when writing the code, it makes reading the code easier. This is because the name acts as a heading, which reminds you of the purpose of the pipe. 4.6 Comments In data analysis code, use comments to record important findings and analysis decisions. If you need comments to explain what your code is doing, consider rewriting your code to be clearer. If you discover that you have more comments than code, considering switching to RMarkdown. "],
["code-documentation.html", "5 Code Documentation 5.1 Introduction 5.2 Title and Description 5.3 Indention 5.4 Capitalization 5.5 Periods 5.6 Reference 5.7 Line Break 5.8 Code Font", " 5 Code Documentation 5.1 Introduction Documentation of code is essential, even if the only person using your code is future-you. Use roxygen2 with enabled markdown support to keep the documentation close to your code. 5.2 Title and Description For the title, describe concisely what the function does at the very top of your function documentation. Do not use a dot at the end of the title and use title style capitalization. For both the title and the description, there is no need to use the explicit @title or @description tag. To visually separate the title and the description, leave one line blank after each of them. #&#39; Combine Values into a Vector or List #&#39; #&#39; This is a generic function which combines its arguments. #&#39; 5.3 Indention Always indent with one space after #'. If any description corresponding to a roxygen tag spans over multiple lines, add another two spaces of extra indention. #&#39; @param key The bare (unquoted) name of the column whose values will be used #&#39; as column headings. Alternatively, tags that span over multiple lines (like @examples) can have the corresponding tag on its own line and subsequent lines do not need extra indention. #&#39; @examples #&#39; 1 + 1 #&#39; sin(pi) The section ‘Description’ does not need extra indention either. 5.4 Capitalization The first letter of every description corresponding to a roxygen tag is upper case. #&#39; @param key The bare (unquoted) name of the column whose values will be used #&#39; as column headings. An exception to this rule are words in code font (see below), in which case also lower case letters can occur. #&#39; @seealso [fct_lump()] 5.5 Periods For all bullets, enumerations argument descriptions and the like, put a period at the end of each text element, even if it is only a few words. Use a double point before you start to enumerate. #&#39; @details In the following, we present the bullets of the list: #&#39; * item one. 5.6 Reference Cross-referencing is encouraged, both within R’s help file system as well as to external resources. Use () when referencing function calls after the function name. #&#39; @seealso [fct_lump()] When referring to other sections in the documentation, use single quotes and upper title style capitalization. #&#39; @param p1 Another parameter. See &#39;Details&#39;. 5.7 Line Break To force a line break in the .Rd file, simply put an empty line after the line you want to insert the line break and roxygen2 will do the job. #&#39; Some stuff. #&#39; #&#39; Some remotely related stuff on a new line. 5.8 Code Font As a general rule, use code font when you are referring to something that has a specific and well-defined meaning within the R language or your code specifically. If such a specific meaning is attributed to a term, but you mean just the general concept, do not use code font. #&#39; A matrix can store data. Matematicians used matrices before R existed. The general rule introduced above implies to use code font for: Function names. Function arguments. Logical values. Literal R code. NA, NaN, ..., NULL etc. To refer to the R language, use \\R. "]
]
